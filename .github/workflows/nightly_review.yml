name: nightly-review

on:
  schedule:
    # UTC 12:30 = 北京 20:30 / 东京 21:30
    - cron: "30 12 * * 1-5"
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: nightly-review
  cancel-in-progress: true

jobs:
  run-nightly:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: pip install requests

      # 1) 抓净值/收盘价 → reports/nav/YYYY-MM-DD.csv
      - name: Fetch NAV & closes
        run: |
          python nav_fetch.py
          echo "---- after nav_fetch.py ----"
          ls -lah reports || true
          ls -lah reports/nav || true

      # 2) 生成日报 → reports/daily/YYYY-MM-DD.md
      - name: Build daily review
        env:
          SERVER_CHAN_KEY: ${{ secrets.SERVER_CHAN_KEY }}
        run: |
          python daily_review.py
          echo "---- after daily_review.py ----"
          ls -lah reports/daily || true

      # 3) 计算日期 & PR 分支名（供后面引用）
      - name: Compute meta
        id: meta
        shell: bash
        run: |
          d=$(date -u +%F)
          echo "date=$d"   >> $GITHUB_OUTPUT
          echo "branch=bot/nightly-$d" >> $GITHUB_OUTPUT

      # 4) 创建 PR（不会直接 push 到 main；无变更自动跳过）
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "nightly review: ${{ steps.meta.outputs.date }}"
          title: "nightly review ${{ steps.meta.outputs.date }}"
          body: |
            Auto-generated nightly review.
            - NAV snapshot: reports/nav/${{ steps.meta.outputs.date }}.csv
            - Daily report: reports/daily/${{ steps.meta.outputs.date }}.md
          branch: ${{ steps.meta.outputs.branch }}
          base: main
          delete-branch: true
          add-paths: |
            reports/**
            logs/**

      # ✅ 自动开启 Auto‑merge（SQUASH）
      - name: Enable auto-merge for PR
        if: ${{ steps.cpr.outputs.pull-request-number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
        run: |
          set -e
          OWNER="${REPO%/*}"
          NAME="${REPO#*/}"
          # 1) 通过 GraphQL 拿到 PR 的 node id
          python - <<'PY'
import json, os, sys, urllib.request
token   = os.environ['GH_TOKEN']
owner   = os.environ['OWNER'] if 'OWNER' in os.environ else os.environ['REPO'].split('/')[0]
name    = os.environ['NAME']  if 'NAME'  in os.environ else os.environ['REPO'].split('/')[1]
number  = int(os.environ['PR_NUMBER'])
q = {
  "query": "query($o:String!,$n:String!,$num:Int!){repository(owner:$o,name:$n){pullRequest(number:$num){id}}}",
  "variables": {"o": owner, "n": name, "num": number}
}
req = urllib.request.Request("https://api.github.com/graphql",
    data=json.dumps(q).encode(),
    headers={"Authorization":"bearer "+token,"Content-Type":"application/json"})
data = json.load(urllib.request.urlopen(req))
prid = data["data"]["repository"]["pullRequest"]["id"]
# 2) 启用 Auto-merge（SQUASH）
m = {
  "query": "mutation($id:ID!){enablePullRequestAutoMerge(input:{pullRequestId:$id,mergeMethod:SQUASH}){clientMutationId}}",
  "variables": {"id": prid}
}
req = urllib.request.Request("https://api.github.com/graphql",
    data=json.dumps(m).encode(),
    headers={"Authorization":"bearer "+token,"Content-Type":"application/json"})
print(json.load(urllib.request.urlopen(req)))
PY
